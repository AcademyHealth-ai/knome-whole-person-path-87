# Codemagic CI configuration for cloud iOS builds (Capacitor)

workflows:
  ios_testflight:
    name: iOS TestFlight
    max_build_duration: 60
    environment:
      xcode: 15.4
      cocoapods: default
      node: 20.15.0
      groups:
        - app_store_connect
        - ios_signing
      vars:
        XCODE_SCHEME: App
        BUNDLE_IDENTIFIER: app.lovable.a97379e496a1241fea9bafbc36edce731
        DEVELOPMENT_TEAM: 6547583QJL
    cache:
      cache_paths:
        - ~/.npm
        - ~/.cache/CocoaPods
        - $CM_BUILD_DIR/node_modules
        - ios/App/Pods
    scripts:
      - name: Preflight - verify App Store Connect variables
        script: |
          set -e
          echo "Checking App Store Connect variables..."
          missing=0
          if [ -z "${APP_STORE_KEY_ID}" ]; then echo "‚ùå APP_STORE_KEY_ID missing"; missing=1; fi
          if [ -z "${APP_STORE_ISSUER_ID}" ]; then echo "‚ùå APP_STORE_ISSUER_ID missing"; missing=1; fi
          if [ -z "${APP_STORE_P8}" ]; then echo "‚ùå APP_STORE_P8 missing"; missing=1; fi
          if [ "$missing" -eq 1 ]; then exit 1; fi
          if ! echo "$APP_STORE_P8" | grep -q "BEGIN PRIVATE KEY"; then echo "‚ùå APP_STORE_P8 missing valid header"; exit 1; fi
          echo "‚úÖ Preflight passed"
      - name: Install dependencies
        script: |
          npm ci
          npm install -g @capacitor/cli
      - name: Build web assets
        script: |
          npm run build
      - name: Setup iOS platform (Capacitor)
        script: |
          if [ -d "ios" ]; then rm -rf ios; fi
          npx cap add ios
      - name: Install iOS dependencies
        script: |
          npx cap sync ios
          cd ios/App && pod install
      - name: Debug environment variables
        script: |
          echo "TEAM: $DEVELOPMENT_TEAM"
          echo "SCHEME: $XCODE_SCHEME"
          echo "APP_STORE_KEY_ID length: ${#APP_STORE_KEY_ID}"
          echo "APP_STORE_P8 first line:"
          echo "$APP_STORE_P8" | head -n 1
      - name: Set up code signing
        script: |
          set -e
          cd $CM_BUILD_DIR
          
          echo "üîç Setting up code signing..."
          # Initialize keychain first
          keychain initialize
          
          # Fetch signing files with proper error handling
          app-store-connect fetch-signing-files "$BUNDLE_IDENTIFIER" \
            --issuer-id "$APP_STORE_ISSUER_ID" \
            --key-id "$APP_STORE_KEY_ID" \
            --private-key "$APP_STORE_P8" \
            --type IOS_APP_STORE \
            --create || echo "Continuing with existing certificates..."
          
          # Add certificates to keychain
          keychain add-certificates || echo "Continuing..."
          
          # Configure Xcode project
          cd ios/App
          xcode-project use-profiles || echo "Using automatic profile selection..."
      - name: Configure manual signing
        script: |
          cd ios/App
          
          # Update project.pbxproj to use manual signing with downloaded profiles
          sed -i '' 's/CODE_SIGN_STYLE = Automatic/CODE_SIGN_STYLE = Manual/g' App.xcodeproj/project.pbxproj
          
          # Ensure development team is set
          sed -i '' "s/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = ${DEVELOPMENT_TEAM};/g" App.xcodeproj/project.pbxproj
          
          echo "üîç Project signing configuration updated for manual signing"
      - name: üîç List shared Xcode schemes
        script: |
          cd ios/App
          xcodebuild -list
      - name: üîç Show signing settings for Archive
        script: |
          cd ios/App
          xcodebuild -showBuildSettings -workspace App.xcworkspace -scheme "$XCODE_SCHEME" -configuration Release | grep -i signing
      - name: Archive (Release)
        script: |
          set -e
          cd ios/App
          
          echo "üîç Searching for provisioning profiles..."
          
          # Check multiple possible locations for provisioning profiles
          PROFILE_LOCATIONS=(
            "$HOME/Library/MobileDevice/Provisioning Profiles"
            "$CM_BUILD_DIR/profiles"
            "$CM_BUILD_DIR"
            "/tmp/profiles"
          )
          
          PROVISIONING_PROFILE=""
          for location in "${PROFILE_LOCATIONS[@]}"; do
            if [ -d "$location" ]; then
              echo "üîç Checking location: $location"
              ls -la "$location" || true
              FOUND_PROFILE=$(find "$location" -name "*.mobileprovision" -exec grep -l "$BUNDLE_IDENTIFIER" {} \; 2>/dev/null | head -n 1)
              if [ -n "$FOUND_PROFILE" ]; then
                PROVISIONING_PROFILE="$FOUND_PROFILE"
                echo "üîç Found provisioning profile at: $PROVISIONING_PROFILE"
                break
              fi
            fi
          done
          
          # If no specific profile found, try automatic provisioning
          if [ -n "$PROVISIONING_PROFILE" ]; then
            PROFILE_UUID=$(grep -aA1 UUID "$PROVISIONING_PROFILE" | grep string | sed 's/<string>//g' | sed 's/<\/string>//g' | tr -d '\t' | head -n 1)
            echo "üîç Using provisioning profile UUID: $PROFILE_UUID"
            
            xcodebuild \
              -workspace App.xcworkspace \
              -scheme "$XCODE_SCHEME" \
              -configuration Release \
              -destination "generic/platform=iOS" \
              -archivePath "$CM_BUILD_DIR/build/App.xcarchive" \
              CODE_SIGN_STYLE=Manual \
              DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
              PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
              -verbose \
              -allowProvisioningUpdates \
              clean archive
          else
            echo "üîç No specific provisioning profile found, trying with automatic provisioning updates..."
            xcodebuild \
              -workspace App.xcworkspace \
              -scheme "$XCODE_SCHEME" \
              -configuration Release \
              -destination "generic/platform=iOS" \
              -archivePath "$CM_BUILD_DIR/build/App.xcarchive" \
              CODE_SIGN_STYLE=Automatic \
              DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
              -verbose \
              -allowProvisioningUpdates \
              clean archive
          fi
      - name: üíæ Create export options manually
        script: |
          cat > ios/App/exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${DEVELOPMENT_TEAM}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>uploadBitcode</key>
            <false/>
            <key>compileBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF

          export CM_EXPORT_OPTIONS=$CM_BUILD_DIR/ios/App/exportOptions.plist
      - name: Export IPA
        script: |
          xcodebuild \
            -exportArchive \
            -archivePath "$CM_BUILD_DIR/build/App.xcarchive" \
            -exportOptionsPlist "$CM_EXPORT_OPTIONS" \
            -exportPath "$CM_BUILD_DIR/build/ipa"
    artifacts:
      - build/ipa/*.ipa
      - build/App.xcarchive
    publishing:
      app_store_connect:
        key_id: $APP_STORE_KEY_ID
        issuer_id: $APP_STORE_ISSUER_ID
        api_key: $APP_STORE_P8
        submit_to_testflight: true
