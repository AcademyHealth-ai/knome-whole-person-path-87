# Codemagic CI configuration for cloud iOS builds (Capacitor)

workflows:
  ios_testflight:
    name: iOS TestFlight
    max_build_duration: 60
    environment:
      xcode: 15.4
      cocoapods: default
      node: 20.15.0
      groups:
        - app_store_connect
        - ios_signing
      vars:
        XCODE_SCHEME: App
        BUNDLE_IDENTIFIER: com.academyhealth.knoMe
        DEVELOPMENT_TEAM: 6547583QJL
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_ISSUER_ID
        APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_KEY_ID
        APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_P8
    cache:
      cache_paths:
        - ~/.npm
        - ~/.cache/CocoaPods
        - $CM_BUILD_DIR/node_modules
        - ios/App/Pods
    scripts:
      - name: Preflight - verify App Store Connect variables
        script: |
          set -e
          echo "Checking App Store Connect variables..."
          missing=0
          if [ -z "${APP_STORE_KEY_ID}" ]; then echo "❌ APP_STORE_KEY_ID missing"; missing=1; fi
          if [ -z "${APP_STORE_ISSUER_ID}" ]; then echo "❌ APP_STORE_ISSUER_ID missing"; missing=1; fi
          if [ -z "${APP_STORE_P8}" ]; then echo "❌ APP_STORE_P8 missing"; missing=1; fi
          if [ "$missing" -eq 1 ]; then exit 1; fi
          # Skip header check for base64 encoded content
          echo "✅ Preflight passed"
      - name: Install dependencies
        script: |
          npm ci
          npm install -g @capacitor/cli
      - name: Build web assets
        script: |
          npm run build
      - name: Setup iOS platform (Capacitor)
        script: |
          if [ -d "ios" ]; then rm -rf ios; fi
          npx cap add ios
      - name: Install iOS dependencies
        script: |
          npx cap sync ios
          cd ios/App && pod install
      - name: Debug environment variables
        script: |
          echo "TEAM: $DEVELOPMENT_TEAM"
          echo "SCHEME: $XCODE_SCHEME"
          echo "APP_STORE_KEY_ID length: ${#APP_STORE_KEY_ID}"
          echo "APP_STORE_P8 first line:"
          echo "$APP_STORE_P8" | head -n 1
      - name: Set up code signing
        script: |
           set -e
           echo "🔍 Setting up automatic code signing for App Store distribution..."
           
           # Create App Store Connect API key file with proper formatting
           mkdir -p ~/private_keys
           
           # Write P8 content preserving line breaks and format
           echo "$APP_STORE_P8" > ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8
           chmod 600 ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8
           
           # Validate the P8 file format
           echo "🔍 Validating P8 file format..."
           if ! grep -q "BEGIN PRIVATE KEY" ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8; then
             echo "❌ Error: P8 file missing BEGIN PRIVATE KEY header"
             echo "P8 file content preview:"
             head -5 ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8
             exit 1
           fi
           if ! grep -q "END PRIVATE KEY" ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8; then
             echo "❌ Error: P8 file missing END PRIVATE KEY footer"
             exit 1
           fi
           
           # Test App Store Connect authentication
           echo "🔍 Testing App Store Connect authentication..."
           export FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=""
           export FASTLANE_SESSION=""
           
           # Create temporary auth test
           cat > ~/test_auth.rb << 'EOFAUTH'
require 'spaceship'

begin
  Spaceship::ConnectAPI.token = Spaceship::ConnectAPI::Token.create(
    key_id: ENV['APP_STORE_CONNECT_KEY_IDENTIFIER'],
    issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
    filepath: ENV['AUTH_KEY_PATH']
  )
  
  teams = Spaceship::ConnectAPI.get_teams
  puts "✅ Authentication successful. Found #{teams.count} team(s)"
  teams.each { |team| puts "  - #{team.name} (#{team.id})" }
rescue => e
  puts "❌ Authentication failed: #{e.message}"
  exit 1
end
EOFAUTH

           # Install spaceship and test auth
           gem install spaceship-fastlane --no-document || true
           AUTH_KEY_PATH=~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8 ruby ~/test_auth.rb
           
           cd ios/App
           echo "🔧 Configuring project for automatic signing..."
           
           # Update project settings for automatic signing
           sed -i '' 's/CODE_SIGN_STYLE = Manual/CODE_SIGN_STYLE = Automatic/g' App.xcodeproj/project.pbxproj || true
           sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "'"$DEVELOPMENT_TEAM"'";/g' App.xcodeproj/project.pbxproj || true
           sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = .*/PRODUCT_BUNDLE_IDENTIFIER = "'"$BUNDLE_IDENTIFIER"'";/g' App.xcodeproj/project.pbxproj || true
           
           echo "✅ Code signing setup completed"
      - name: Archive (Release)
        script: |
          set -e
          cd ios/App
          
           echo "🔍 Building for App Store distribution with automatic signing..."
           echo "🔧 Bundle identifier: $BUNDLE_IDENTIFIER" 
           echo "🔧 Development team: $DEVELOPMENT_TEAM"
           
           # Ensure directory exists
           mkdir -p "$CM_BUILD_DIR/build"
           
           # Use App Store Connect API for automatic signing
           export FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=""
           export FASTLANE_SESSION=""
           export FASTLANE_SKIP_GOOGLE_ANALYTICS=1
           
           xcodebuild \
             -workspace App.xcworkspace \
             -scheme "$XCODE_SCHEME" \
             -configuration Release \
             -destination "generic/platform=iOS" \
             -archivePath "$CM_BUILD_DIR/build/App.xcarchive" \
             -allowProvisioningUpdates \
             -authenticationKeyPath ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8 \
             -authenticationKeyID "$APP_STORE_KEY_ID" \
             -authenticationKeyIssuerID "$APP_STORE_ISSUER_ID" \
             DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
             CODE_SIGN_STYLE=Automatic \
             PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_IDENTIFIER" \
             MARKETING_VERSION="1.0" \
             CURRENT_PROJECT_VERSION="1" \
             clean archive
      - name: Export IPA
        script: |
          # Create export options plist
          cat > ~/export_options.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$DEVELOPMENT_TEAM</string>
          </dict>
          </plist>
          EOF
          
           # Ensure directory exists
           mkdir -p "$CM_BUILD_DIR/build/ipa"
           
           xcodebuild \
             -exportArchive \
             -archivePath "$CM_BUILD_DIR/build/App.xcarchive" \
             -exportOptionsPlist ~/export_options.plist \
             -exportPath "$CM_BUILD_DIR/build/ipa" \
             -allowProvisioningUpdates
    artifacts:
      - build/ipa/*.ipa
      - build/App.xcarchive
    publishing:
      app_store_connect:
        key_id: $APP_STORE_KEY_ID
        issuer_id: $APP_STORE_ISSUER_ID
        api_key: $APP_STORE_P8
        submit_to_testflight: true
