# Codemagic CI configuration for cloud iOS builds (Capacitor)

workflows:
  ios_testflight:
    name: iOS TestFlight
    max_build_duration: 60
    environment:
      xcode: 15.4
      cocoapods: default
      node: 20.15.0
      groups:
        - app_store_connect
        - ios_signing
      vars:
        XCODE_SCHEME: App
        BUNDLE_IDENTIFIER: com.academyhealth.knoMe
        DEVELOPMENT_TEAM: $DEVELOPMENT_TEAM
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_ISSUER_ID
        APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_KEY_ID
        APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_P8
    cache:
      cache_paths:
        - ~/.npm
        - ~/.cache/CocoaPods
        - $CM_BUILD_DIR/node_modules
        - ios/App/Pods
    scripts:
      - name: Preflight - verify App Store Connect variables
        script: |
          set -e
          echo "Checking App Store Connect variables..."
          missing=0
          if [ -z "${APP_STORE_KEY_ID}" ]; then echo "❌ APP_STORE_KEY_ID missing"; missing=1; fi
          if [ -z "${APP_STORE_ISSUER_ID}" ]; then echo "❌ APP_STORE_ISSUER_ID missing"; missing=1; fi
          if [ -z "${APP_STORE_P8}" ]; then echo "❌ APP_STORE_P8 missing"; missing=1; fi
          if [ "$missing" -eq 1 ]; then exit 1; fi
          # Skip header check for base64 encoded content
          echo "✅ Preflight passed"
      - name: Install dependencies
        script: |
          npm ci
          npm install -g @capacitor/cli
      - name: Build web assets
        script: |
          npm run build
      - name: Setup iOS platform (Capacitor)
        script: |
          if [ -d "ios" ]; then rm -rf ios; fi
          npx cap add ios
      - name: Install iOS dependencies
        script: |
          npx cap sync ios
          cd ios/App && pod install
      - name: Debug environment variables
        script: |
          echo "TEAM: $DEVELOPMENT_TEAM"
          echo "SCHEME: $XCODE_SCHEME"
          echo "APP_STORE_KEY_ID length: ${#APP_STORE_KEY_ID}"
          echo "APP_STORE_P8 first line:"
          echo "$APP_STORE_P8" | head -n 1
          echo ""
          echo "⚠️  CRITICAL AUTHENTICATION CHECKLIST:"
          echo "⚠️  1. Verify DEVELOPMENT_TEAM ($DEVELOPMENT_TEAM) matches your API key's team"
          echo "⚠️  2. Ensure API key has 'Developer' role (not just 'App Manager')"
          echo "⚠️  3. Confirm KEY_ID and ISSUER_ID are from the same Apple Developer account"
          echo "⚠️  4. Bundle ID ($BUNDLE_IDENTIFIER) must be registered for this team"
          
          # Check if DEVELOPMENT_TEAM is properly set
          if [ -z "$DEVELOPMENT_TEAM" ]; then
            echo "❌ ERROR: DEVELOPMENT_TEAM environment variable is not set!"
            echo "Please add DEVELOPMENT_TEAM to your Codemagic environment variables"
            exit 1
          fi
      - name: Set up code signing
        script: |
          set -e
          echo "🔍 Setting up App Store Connect API authentication..."
          
          # Set development team in Xcode project
          echo "Setting DEVELOPMENT_TEAM to: $DEVELOPMENT_TEAM"
          /usr/libexec/PlistBuddy -c "Set :objects:23EC762B2BBE03610001D57F:attributes:DEVELOPMENT_TEAM $DEVELOPMENT_TEAM" ios/App/App.xcodeproj/project.pbxproj || echo "Failed to set development team in project.pbxproj"
          
          # Also set it using xcodebuild
          xcodebuild -project ios/App/App.xcodeproj -target App -configuration Release DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" CODE_SIGN_STYLE=Automatic -showBuildSettings | head -20
          
          # Create App Store Connect API key file with proper formatting
          mkdir -p ~/private_keys
          
          # Write P8 content - handle both raw and base64 encoded formats
          echo "Processing P8 key..."
          
          # Clean the P8 content by removing any whitespace/newlines that might interfere
          CLEAN_P8=$(echo "$APP_STORE_P8" | tr -d '\r\n' | tr -d ' ')
          
          # First try to use the key as-is if it already contains PEM headers
          if echo "$APP_STORE_P8" | grep -q "BEGIN PRIVATE KEY"; then
            echo "Using P8 key as-is (already in PEM format)..."
            echo "$APP_STORE_P8" > ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8
          # Try base64 decode with cleaned content
          elif echo "$CLEAN_P8" | base64 -d 2>/dev/null | grep -q "BEGIN PRIVATE KEY"; then
            echo "Decoding base64 encoded P8 key..."
            echo "$CLEAN_P8" | base64 -d > ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8
          # If base64 decode doesn't work, try to construct a proper PEM format
          else
            echo "Constructing P8 key in PEM format..."
            {
              echo "-----BEGIN PRIVATE KEY-----"
              echo "$CLEAN_P8" | fold -w 64
              echo "-----END PRIVATE KEY-----"
            } > ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8
          fi
          chmod 600 ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8
          
          # Validate the P8 file format
          echo "🔍 Validating P8 file format..."
          if ! grep -q "BEGIN PRIVATE KEY" ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8; then
            echo "❌ Error: P8 file missing BEGIN PRIVATE KEY header"
            echo "P8 file content preview:"
            head -5 ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8
            exit 1
          fi
          if ! grep -q "END PRIVATE KEY" ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8; then
            echo "❌ Error: P8 file missing END PRIVATE KEY footer"
            exit 1
          fi
          
          echo "✅ P8 file validation passed"
          
          cd ios/App
          echo "🔧 Configuring project for automatic signing..."
          
          # Update project settings for automatic signing
          sed -i '' 's/CODE_SIGN_STYLE = Manual/CODE_SIGN_STYLE = Automatic/g' App.xcodeproj/project.pbxproj || true
          sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "'"$DEVELOPMENT_TEAM"'";/g' App.xcodeproj/project.pbxproj || true
          sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = .*/PRODUCT_BUNDLE_IDENTIFIER = "'"$BUNDLE_IDENTIFIER"'";/g' App.xcodeproj/project.pbxproj || true
          
          echo "✅ Code signing setup completed"
      - name: Archive (Release)
        script: |
          set -e
          cd ios/App
          
           echo "🔍 Building for App Store distribution with automatic signing..."
           echo "🔧 Bundle identifier: $BUNDLE_IDENTIFIER" 
           echo "🔧 Development team: $DEVELOPMENT_TEAM"
           
           # Ensure directory exists
           mkdir -p "$CM_BUILD_DIR/build"
           
           # Use App Store Connect API for automatic signing
           export FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=""
           export FASTLANE_SESSION=""
           export FASTLANE_SKIP_GOOGLE_ANALYTICS=1
           
           xcodebuild \
             -workspace App.xcworkspace \
             -scheme "$XCODE_SCHEME" \
             -configuration Release \
             -destination "generic/platform=iOS" \
             -archivePath "$CM_BUILD_DIR/build/App.xcarchive" \
             -allowProvisioningUpdates \
             -authenticationKeyPath ~/private_keys/AuthKey_${APP_STORE_KEY_ID}.p8 \
             -authenticationKeyID "$APP_STORE_KEY_ID" \
             -authenticationKeyIssuerID "$APP_STORE_ISSUER_ID" \
             DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
             CODE_SIGN_STYLE=Automatic \
             PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_IDENTIFIER" \
             MARKETING_VERSION="1.0" \
             CURRENT_PROJECT_VERSION="1" \
             clean archive
      - name: Export IPA
        script: |
          # Create export options plist
          cat > ~/export_options.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$DEVELOPMENT_TEAM</string>
          </dict>
          </plist>
          EOF
          
           # Ensure directory exists
           mkdir -p "$CM_BUILD_DIR/build/ipa"
           
           xcodebuild \
             -exportArchive \
             -archivePath "$CM_BUILD_DIR/build/App.xcarchive" \
             -exportOptionsPlist ~/export_options.plist \
             -exportPath "$CM_BUILD_DIR/build/ipa" \
             -allowProvisioningUpdates
    artifacts:
      - build/ipa/*.ipa
      - build/App.xcarchive
    publishing:
      app_store_connect:
        key_id: $APP_STORE_KEY_ID
        issuer_id: $APP_STORE_ISSUER_ID
        api_key: $APP_STORE_P8
        submit_to_testflight: true
